#include "svg.procgen"

using pseudopath = struct 
{
    path data;
    int TTL;
};

using transform = rule pseudopath
{
    if(this.TTL > 0)
    {
        return true;
    }
    return false;
} {
    this.TTL = this.TTL - 1;

    collection newPoints;
    while(this.data.path.size() > 0)
    {
        point first = this.data.path.at(0);
        point second = this.data.path.at(1);
        this.data.path.del(0);
        this.data.path.del(0);

        // calculate new point

        point newPoint = point((first.x+second.x)/2.0, (first.y+second.y)/2.0);

        newPoints.insert(first);
        newPoints.insert(newPoint);
        newPoints.insert(newPoint);
        newPoints.insert(second);
    }
    this.data.path = newPoints;
    appendSymbol(this);
};


using finalstep = rule pseudopath 
{
    if(this.TTL == 0)
    {
        return true;
    }
    return false;
} {
    appendSymbol(this.data);
};

int init()
{
    initSVG();

    collection style;
    style.insert(fillColorStyle(REDCOLOR));

    collection points;
    points.insert(point(50.0,50.0));
    points.insert(point(100.0,50.0));
    points.insert(point(100.0,100.0));
    points.insert(point(50.0,100.0));

    appendSymbol(pseudopath(path(points,style),3));
}
